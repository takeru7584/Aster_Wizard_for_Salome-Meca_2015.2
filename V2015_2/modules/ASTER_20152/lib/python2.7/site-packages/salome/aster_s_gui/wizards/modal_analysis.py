# -*- coding: utf-8 -*-
"""Qt wizard on modal analysis study case
"""
"""
    modified by Takeru who belongs
    to Japanese Localization Subcommittee in JSWG (Japan Salome-Meca Working Group)
    on Mar 12 2014
"""

from PyQt4 import QtGui as qt

import aster_s.salome_tree as ST
from aster_s.wizards import modal_analysis as MA

import aster_s_gui
import aster_s_gui.wizards.common as WC


class SMeshExp(WC.CompoExp):
    """Modal analysis SMESH explorator
    """

    def __init__(self):
        WC.CompoExp.__init__(self)
        SMesh = ST.SMeshExplorator
        exp = SMesh()
        no_grp = exp.add_group(MA.GRP_NO)
        no_grp.register((2, 3), [SMesh.node])
        ma_grp = exp.add_group(MA.GRP_MA)
        ma_grp.register((2, 3), [SMesh.edge])
        ma_grp.register((3,), [SMesh.face, SMesh.volume])
        self.register("boundaries", exp)

    def validate(self, mesh, mod):
        """Validate the mesh"""
        return WC.at_least_a_group(self.give("boundaries"), mesh, mod)


class GeomExp(WC.CompoExp):
    """Modal analysis GEOM explorator
    """

    def __init__(self):
        WC.CompoExp.__init__(self)
        Geom = ST.GeomExplorator
        exp = Geom()
        no_grp = exp.add_group(MA.GRP_NO)
        no_grp.register((2, 3), [Geom.vertex])
        ma_grp = exp.add_group(MA.GRP_MA)
        ma_grp.register((2, 3), [Geom.edge])
        ma_grp.register((3,), [Geom.face, Geom.shell])
        self.register("boundaries", exp)

    def validate(self, mesh, mod):
        """Validate the mesh"""
        return WC.at_least_a_group(self.give("boundaries"), mesh, mod)


class ModesNb(WC.Param):
    """Define the numer of modes
    """

    def __init__(self, dft="5"):
        self._dft = dft
#        self.title = u"Number of modes (N)"
        self.title = u"固有振動数の数 (N)"
        self.title = qt.QApplication.translate("WizardModalAnalysis", "Number of modes (N)", None, qt.QApplication.UnicodeUTF8)
        self.suffix = u"(N > 0)"

    def add_to(self, page, grid, ridx):
        """Add to the grid"""
        grid.addWidget(qt.QLabel(self.title), ridx, 0)
        entry = WC.create_entry(WC.Int(1, int(1e6)))
        page.register_qt_field("modes-nb*", entry)
        entry.setText(self._dft)
        grid.addWidget(entry, ridx, 1)
        grid.addWidget(qt.QLabel(self.suffix), ridx, 2)


def add_modes_page(wiz):
    """Add the page for selecting the number of modes"""
#    title = u"Number of modes"
    title = u"固有振動数の数"
    title = qt.QApplication.translate("WizardModalAnalysis", "Number of modes", None, qt.QApplication.UnicodeUTF8)
#    stitle = title + u" definition"
    stitle = title + u" の設定"
    stitle = title + qt.QApplication.translate("WizardModalAnalysis", " definition", None, qt.QApplication.UnicodeUTF8)
    WC.add_grid_page(wiz, title, stitle, [ModesNb()]) 


class FinalPage(WC.FinalPage):
    """Build case
    """

    def validatePage(self):
        """Validate the wizard"""
        getf = self.give_field

        comm = MA.CommWriter()
        comm.use(MA.Modelisation(getf("model")))
        comm.use(MA.YoungModulus(self.get_float("young-modulus")))
        comm.use(MA.Density(self.get_float("density")))
        comm.use(MA.PoissonRatio(self.get_float("poisson-ratio")))
        bound_consts = comm.use(MA. BoundConstraints())
        mesh = getf("mesh")
        exp = getf("exp-store").give_exp("boundaries")
        if getf("group-boundaries"):
            for cond in getf("group-boundaries"):
                gname = str(cond[0])
                grp_type = exp.give_group_key(mesh, gname)
                bound_consts.add(MA.DplFromName(grp_type, gname, *cond[1:]))
        else:
            mess = "Warning: You have not defined boundary conditions "
            self._mod.launch(aster_s_gui.INFO, mess)
        comm.use(MA.FreqMaxNb(self.get_int("modes-nb")))
        comm.write(self.get_str("command-file"))

        self.add_case("modal-analysis")
        return True


def create_wizard(mod):
    """Create the modal analysis wizard"""
#    wiz = WC.Wizard(u"Modal analysis", mod)
#    wiz = WC.Wizard(u"固有値解析", mod)
    wiz = WC.Wizard(qt.QApplication.translate("WizardModalAnalysis", "Modal analysis", None, qt.QApplication.UnicodeUTF8), mod)
    WC.add_model_page(wiz, [
        WC.Mode3D,
        WC.PlaneStress,
        WC.PlaneStrain,
        WC.AxisSymmetric,
        ])
    exp_store = WC.ExpStore()
    exp_store.register(WC.ExpStore.smesh, SMeshExp())
    exp_store.register(WC.ExpStore.geom, GeomExp())
    WC.add_mesh_page(wiz, mod, exp_store)
#    title = u"Young's modulus, density and Poisson ratio definitions"
#    title = u"ヤング係数、密度とポアソン比の設定"
    #qt.QApplication.translate("WizardModalAnalysis", "", None, qt.QApplication.UnicodeUTF8)
    title = qt.QApplication.translate("WizardModalAnalysis", "Young's modulus, density and Poisson ratio definitions", None, qt.QApplication.UnicodeUTF8)
    WC.add_material_page(wiz, title, [
        WC.YoungModulus(),
        WC.Density(),
        WC.PoissonRatio(),
    ])
    WC.add_boundaries_page(wiz)
    add_modes_page(wiz)
    WC.add_command_file_page(wiz, FinalPage(mod))
    return wiz

