# -*- coding: utf-8 -*-
"""Qt wizard on linear static study case
"""
"""
    modified by Takeru who belongs
    to Japanese Localization Subcommittee in JSWG (Japan Salome-Meca Working Group)
    on Mar 12 2014
"""

from PyQt4 import QtGui as qt

import aster_s.salome_tree as ST
import aster_s.wizards.linear_static as LS
import aster_s_gui
import aster_s_gui.wizards.common as WC
from aster_s.utils import log_gui


def is_valid_mesh(cexp, mesh, mod):
    """A valid mesh needs to have groups for pressure"""
    is_valid = True
    log_gui.debug("is_valid_mesh %s / %s", mesh, mod)
    if not mesh:
        mess = "A mesh is required"
        mod.launch(aster_s_gui.ERROR, mess)
        is_valid = False
        return is_valid
    if not cexp.give("pressure").find_groups(mesh):
        mess = "At least a group without nodes need to be defined " \
               "on the selected object"
        mod.launch(aster_s_gui.ERROR, mess)
        is_valid = False
    return is_valid


class SMeshExp(WC.CompoExp):
    """Linear static SMESH explorator
    """

    def __init__(self):
        WC.CompoExp.__init__(self)
        SMesh = ST.SMeshExplorator
        exp = SMesh()
        no_grp = exp.add_group(LS.GRP_NO)
        no_grp.register((2, 3), [SMesh.node])
        ma_grp = exp.add_group(LS.GRP_MA)
        ma_grp.register((2, 3), [SMesh.edge])
        ma_grp.register((3,), [SMesh.face, SMesh.volume])
        self.register("boundaries", exp)
        self.register("pressure", ma_grp)

    def validate(self, mesh, mod):
        """A valid mesh needs to have mesh groups for defining pressure"""
        return is_valid_mesh(self, mesh, mod)


class GeomExp(WC.CompoExp):
    """Linear static GEOM explorator
    """

    def __init__(self):
        WC.CompoExp.__init__(self)
        Geom = ST.GeomExplorator
        exp = Geom()
        no_grp = exp.add_group(LS.GRP_NO)
        no_grp.register((2, 3), [Geom.vertex])
        ma_grp = exp.add_group(LS.GRP_MA)
        ma_grp.register((2, 3), [Geom.edge])
        ma_grp.register((3,), [Geom.face, Geom.shell])
        self.register("boundaries", exp)
        self.register("pressure", ma_grp)

    def validate(self, mesh, mod):
        """A valid geometry needs to have mesh groups for defining pressure"""
        return is_valid_mesh(self, mesh, mod)


class PressurePage(WC.WizardPage):
    """Wizard page on pressure loading
    """

    def cleanupPage(self):
        """Clean page in case user navigates"""
        WC.WizardPage.cleanup(self)

    def initializePage(self):
        """Query the model on meshes"""
        WC.WizardPage.initialize(self)
        self.page.use(qt.QVBoxLayout())
        exp = self.give_field("exp-store").give_exp("pressure")
        grps = exp.find_groups(self.give_field("mesh"))
        dims = [(u"Pressure", 1.)]
#        tit = u"Adding pressure on meshes groups"
#        tit = u"境界条件（圧力）を指定するグループに対して値を設定する"
        tit = qt.QApplication.translate("WizardLinearStatic", "Adding pressure on meshes groups", None, qt.QApplication.UnicodeUTF8)
        # The last groups should be seen first
        grps.reverse()
        WC.add_condition_selector(self, grps, dims, "pressure-loading*", tit)


def add_pressure_page(wiz):
    """Add page on pressure loading"""
#    page = wiz.add_page(u"Boundaries conditions", PressurePage())
#    page = wiz.add_page(u"境界条件（圧力）の設定", PressurePage())
    page = wiz.add_page(qt.QApplication.translate("WizardLinearStatic", "Boundaries conditions (Pressure)", None, qt.QApplication.UnicodeUTF8), PressurePage())
    page.register("pressure-loading*", None)


class FinalPage(WC.FinalPage):
    """Build case
    """

    def validatePage(self):
        """Validate the wizard"""
        getf = self.give_field

        comm = LS.CommWriter()
        comm.use(LS.Modelisation(getf("model")))
        comm.use(LS.YoungModulus(self.get_float("young-modulus")))
        comm.use(LS.PoissonRatio(self.get_float("poisson-ratio")))
        mech_consts = comm.use(LS.MechConstraints())
        bound_conds = mech_consts.add(LS.BoundConds())
        mesh = getf("mesh")
        exp = getf("exp-store").give_exp("boundaries")

        if not getf("pressure-loading") and not getf("group-boundaries"):
            mess = "Pressure and/or boundary conditions are required "
            self._mod.launch(aster_s_gui.ERROR, mess)
            return False
        else :
            if getf("group-boundaries"):
                for cond in getf("group-boundaries"):
                    gname = str(cond[0])
                    grp_type = exp.give_group_key(mesh, gname)
                    bound_conds.add(LS.DplFromName(grp_type, gname, *cond[1:]))
            else:
                mess = "Warning: You have not defined boundary conditions "
                self._mod.launch(aster_s_gui.INFO, mess)
            pressure = mech_consts.add(LS.Pressure())
            if getf("pressure-loading"):
                for gname, val in getf("pressure-loading"):
                    pressure.add(LS.GrpPres(str(gname), val))
            else:
                mess = "Warning: You have not defined pressure "
                self._mod.launch(aster_s_gui.INFO, mess)
            comm.write(self.get_str("command-file"))
            self.add_case("linear-static")
            return True


def create_wizard(mod):
    """Create the linear static wizard"""
#    wiz = WC.Wizard(u"Isotropic linear elastic study", mod)
#    wiz = WC.Wizard(u"等方性線形弾性材料の応力解析", mod)
    wiz = WC.Wizard(qt.QApplication.translate("WizardLinearStatic", "Isotropic linear elastic study", None, qt.QApplication.UnicodeUTF8), mod)
    WC.add_model_page(wiz, [
        WC.Mode3D,
        WC.PlaneStress,
        WC.PlaneStrain,
        WC.AxisSymmetric,
        ])

    exp_store = WC.ExpStore()
    exp_store.register(WC.ExpStore.smesh, SMeshExp())
    exp_store.register(WC.ExpStore.geom, GeomExp())
    WC.add_mesh_page(wiz, mod, exp_store)
#    title = u"Young's modulus and Poisson ratio definitions"
#    title = u"ヤング係数とポアソン比の設定"
    title = qt.QApplication.translate("WizardLinearStatic", "Young's modulus and Poisson ratio definitions", None, qt.QApplication.UnicodeUTF8)
    WC.add_material_page(wiz, title, [
        WC.YoungModulus(),
        WC.PoissonRatio(),
    ])
    WC.add_boundaries_page(wiz)
    add_pressure_page(wiz)
    WC.add_command_file_page(wiz, FinalPage(mod))
    return wiz


